// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package transfer_alternative

import (
	"context"
	"time"
)

const createTransferAlternative = `-- name: CreateTransferAlternative :exec
INSERT INTO transfer_alternative
(amount,
 from_address,
 to_address,
 block,
 transaction_id,
 time,
 updated_at,
 created_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateTransferAlternativeParams struct {
	Amount        string
	FromAddress   string
	ToAddress     string
	Block         int32
	TransactionID string
	Time          time.Time
	UpdatedAt     time.Time
	CreatedAt     time.Time
}

func (q *Queries) CreateTransferAlternative(ctx context.Context, arg CreateTransferAlternativeParams) error {
	_, err := q.db.ExecContext(ctx, createTransferAlternative,
		arg.Amount,
		arg.FromAddress,
		arg.ToAddress,
		arg.Block,
		arg.TransactionID,
		arg.Time,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	return err
}

const deleteTransferAlternative = `-- name: DeleteTransferAlternative :exec
DELETE
FROM transfer_alternative
WHERE transaction_id = ?
`

func (q *Queries) DeleteTransferAlternative(ctx context.Context, transactionID string) error {
	_, err := q.db.ExecContext(ctx, deleteTransferAlternative, transactionID)
	return err
}

const deleteTransferAlternativeByTime = `-- name: DeleteTransferAlternativeByTime :exec
DELETE
FROM transfer_alternative
WHERE time < ?
`

func (q *Queries) DeleteTransferAlternativeByTime(ctx context.Context, time time.Time) error {
	_, err := q.db.ExecContext(ctx, deleteTransferAlternativeByTime, time)
	return err
}

const getTransferAlternative = `-- name: GetTransferAlternative :one
SELECT id, amount, from_address, to_address, block, transaction_id, time, updated_at, created_at
FROM transfer_alternative
WHERE transaction_id = ? LIMIT 1
`

func (q *Queries) GetTransferAlternative(ctx context.Context, transactionID string) (TransferAlternative, error) {
	row := q.db.QueryRowContext(ctx, getTransferAlternative, transactionID)
	var i TransferAlternative
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.FromAddress,
		&i.ToAddress,
		&i.Block,
		&i.TransactionID,
		&i.Time,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const transferAlternative = `-- name: TransferAlternative :one
SELECT id, amount, from_address, to_address, block, transaction_id, time, updated_at, created_at FROM transfer_alternative WHERE from_address = ? AND to_address = ? LIMIT 1
`

type TransferAlternativeParams struct {
	FromAddress string
	ToAddress   string
}

func (q *Queries) TransferAlternative(ctx context.Context, arg TransferAlternativeParams) (TransferAlternative, error) {
	row := q.db.QueryRowContext(ctx, transferAlternative, arg.FromAddress, arg.ToAddress)
	var i TransferAlternative
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.FromAddress,
		&i.ToAddress,
		&i.Block,
		&i.TransactionID,
		&i.Time,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
